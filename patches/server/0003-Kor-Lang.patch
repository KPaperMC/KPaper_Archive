From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: norhu1130 <norhu1130@naver.com>
Date: Tue, 31 May 2022 22:25:40 +0900
Subject: [PATCH] Kor Lang


diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 0a843e0afbcb1af8e2641515eb244b791b819b8c..d4cff195cdbb18c52b952334d07db0b3308caf60 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -120,7 +120,7 @@ public class Main {
             Eula eula = new Eula(path1);
 
             if (optionset.has("initSettings")) { // CraftBukkit
-                Main.LOGGER.info("Initialized '{}' and '{}'", path.toAbsolutePath(), path1.toAbsolutePath());
+                Main.LOGGER.info("초기화 됨 : '{}' and '{}'", path.toAbsolutePath(), path1.toAbsolutePath());
                 return;
             }
 
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index fb138ad4c9bb051f100999077e2843468f6a23f2..8ea1cd333c70707e9e2695a469e04c2816202c39 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -429,7 +429,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             try {
                 JvmProfiler.INSTANCE.stop();
             } catch (Throwable throwable) {
-                MinecraftServer.LOGGER.warn("Failed to stop JFR profiling", throwable);
+                MinecraftServer.LOGGER.warn("JFR 프로파일링 실패", throwable);
             }
         }
 
@@ -763,7 +763,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         // CraftBukkit end
         if (worldserver.getWorld().getKeepSpawnInMemory()) { // Paper
 
-        MinecraftServer.LOGGER.info("Preparing start region for dimension {}", worldserver.dimension().location());
+        MinecraftServer.LOGGER.info("치원 시작 영역 준비 중 : {}", worldserver.dimension().location());
         BlockPos blockposition = worldserver.getSharedSpawnPos();
 
         worldloadlistener.updateSpawnPos(new ChunkPos(blockposition));
@@ -838,7 +838,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             ServerLevel worldserver = (ServerLevel) iterator.next();
 
             if (!suppressLogs) {
-                MinecraftServer.LOGGER.info("Saving chunks for level '{}'/{}", worldserver, worldserver.dimension().location());
+                MinecraftServer.LOGGER.info("청크 저장 중 : '{}'/{}", worldserver, worldserver.dimension().location());
             }
 
             worldserver.save((ProgressListener) null, flush, worldserver.noSave && !force);
@@ -860,10 +860,10 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             while (iterator1.hasNext()) {
                 ServerLevel worldserver2 = (ServerLevel) iterator1.next();
 
-                MinecraftServer.LOGGER.info("ThreadedAnvilChunkStorage ({}): All chunks are saved", worldserver2.getChunkSource().chunkMap.getStorageName());
+                MinecraftServer.LOGGER.info("ThreadedAnvilChunkStorage ({}): 전체 청크 저장 완료", worldserver2.getChunkSource().chunkMap.getStorageName());
             }
 
-            MinecraftServer.LOGGER.info("ThreadedAnvilChunkStorage: All dimensions are saved");
+            MinecraftServer.LOGGER.info("ThreadedAnvilChunkStorage: 모든 차원 저장 완료");
         }
 
         return flag3;
@@ -911,7 +911,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         shutdownThread = Thread.currentThread();
         org.spigotmc.WatchdogThread.doStop(); // Paper
         if (!isSameThread()) {
-            MinecraftServer.LOGGER.info("Stopping main thread (Ignore any thread death message you see! - DO NOT REPORT THREAD DEATH TO PAPER)");
+            MinecraftServer.LOGGER.info("메인 스레드 종료 중 (스레드 데스 메시지를 무시하세요! - 스레드 데스 메시지를 KPaper팀에 보고하지 마세요.)");
             while (this.getRunningThread().isAlive()) {
                 this.getRunningThread().stop();
                 try {
@@ -925,7 +925,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             this.cancelRecordingMetrics();
         }
 
-        MinecraftServer.LOGGER.info("Stopping server");
+        MinecraftServer.LOGGER.info("서버 종료 중");
         MinecraftTimings.stopServer(); // Paper
         // CraftBukkit start
         if (this.server != null) {
@@ -939,13 +939,13 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
         this.isSaving = true;
         if (this.playerList != null) {
-            MinecraftServer.LOGGER.info("Saving players");
+            MinecraftServer.LOGGER.info("플레이어 저장 중");
             this.playerList.saveAll();
             this.playerList.removeAll(this.isRestarting); // Paper
             try { Thread.sleep(100); } catch (InterruptedException ex) {} // CraftBukkit - SPIGOT-625 - give server at least a chance to send packets
         }
 
-        MinecraftServer.LOGGER.info("Saving worlds");
+        MinecraftServer.LOGGER.info("월드 저장 중");
         Iterator iterator = this.getAllLevels().iterator();
 
         ServerLevel worldserver;
@@ -1003,23 +1003,23 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         try {
             this.storageSource.close();
         } catch (IOException ioexception1) {
-            MinecraftServer.LOGGER.error("Failed to unlock level {}", this.storageSource.getLevelId(), ioexception1);
+            MinecraftServer.LOGGER.error("Level 잠금 해제 실패. {}", this.storageSource.getLevelId(), ioexception1);
         }
         // Spigot start
         MCUtil.asyncExecutor.shutdown(); // Paper
         try { MCUtil.asyncExecutor.awaitTermination(30, java.util.concurrent.TimeUnit.SECONDS); // Paper
         } catch (java.lang.InterruptedException ignored) {} // Paper
         if (org.spigotmc.SpigotConfig.saveUserCacheOnStopOnly) {
-            MinecraftServer.LOGGER.info("Saving usercache.json");
+            MinecraftServer.LOGGER.info("유저캐시 저장 중..");
             this.getProfileCache().save(false); // Paper
         }
         // Spigot end
         // Paper start - move final shutdown items here
-        LOGGER.info("Flushing Chunk IO");
+        LOGGER.info("Chunk IO 닫는 중..");
         com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE.close(true, true); // Paper
-        LOGGER.info("Closing Thread Pool");
+        LOGGER.info("쓰레드 풀 종료 중");
         Util.shutdownExecutors(); // Paper
-        LOGGER.info("Closing Server");
+        LOGGER.info("서버를 닫는 중..");
         try {
             net.minecrell.terminalconsole.TerminalConsoleAppender.close(); // Paper - Use TerminalConsoleAppender
         } catch (Exception e) {
@@ -1134,14 +1134,14 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
             // Spigot start
             // Paper start - move done tracking
-            LOGGER.info("Running delayed init tasks");
+            LOGGER.info("밀린 초기화 작업 실행 중");
             this.server.getScheduler().mainThreadHeartbeat(this.tickCount); // run all 1 tick delay tasks during init,
             // this is going to be the first thing the tick process does anyways, so move done and run it after
             // everything is init before watchdog tick.
             // anything at 3+ won't be caught here but also will trip watchdog....
             // tasks are default scheduled at -1 + delay, and first tick will tick at 1
             String doneTime = String.format(java.util.Locale.ROOT, "%.3fs", (double) (Util.getNanos() - serverStartTime) / 1.0E9D);
-            LOGGER.info("Done ({})! For help, type \"help\"", doneTime);
+            LOGGER.info("서버 시작완료! ({})!", doneTime);
             // Paper end
 
             org.spigotmc.WatchdogThread.tick(); // Paper
@@ -1156,7 +1156,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                     long j = i / 50L;
 
                     if (this.server.getWarnOnOverload()) // CraftBukkit
-                            MinecraftServer.LOGGER.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", i, j);
+                            MinecraftServer.LOGGER.warn("서버가 과부화되었어요! {}ms또는 {}틱이 밀렸어요", i, j);
                     this.nextTickTime += j * 50L;
                     this.lastOverloadWarning = this.nextTickTime;
                 }
@@ -1738,7 +1738,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     protected void initializeKeyPair() {
-        MinecraftServer.LOGGER.info("Generating keypair");
+        MinecraftServer.LOGGER.info("키쌍 생성 중");
 
         try {
             this.keyPair = Crypt.generateKeyPair();
@@ -2100,7 +2100,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 String s1 = resourcepackloader.getId();
 
                 if (!dataPackSettings.getDisabled().contains(s1) && !set.contains(s1)) {
-                    MinecraftServer.LOGGER.info("Found new data pack {}, loading it automatically", s1);
+                    MinecraftServer.LOGGER.info("새 데이터팩 {}을 찾았어요, 자동으로 로드할게요.", s1);
                     set.add(s1);
                 }
             }
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index bdd6560fe85950b0a857a949cb38c044da44ca6b..ef9b03cd166e5b7e83d93effdfea91b3821fb079 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -179,9 +179,9 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         thread.setDaemon(true);
         thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(DedicatedServer.LOGGER));
         // thread.start(); // Paper - moved down
-        DedicatedServer.LOGGER.info("Starting minecraft server version {}", SharedConstants.getCurrentVersion().getName());
+        DedicatedServer.LOGGER.info("마인크래프트 서버 버전 {}을 시작 하는 중..", SharedConstants.getCurrentVersion().getName());
         if (Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L) {
-            DedicatedServer.LOGGER.warn("To start the server with more ram, launch it as \"java -Xmx1024M -Xms1024M -jar minecraft_server.jar\"");
+            DedicatedServer.LOGGER.warn("서버를 실행하려면 램이 더 필요해요. 1GB 이상의 메모리를 주세요.");
         }
 
         // Paper start - detect running as root
@@ -194,7 +194,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         }
         // Paper end
 
-        DedicatedServer.LOGGER.info("Loading properties");
+        DedicatedServer.LOGGER.info("서버 설정 로딩 중..");
         DedicatedServerProperties dedicatedserverproperties = this.settings.getProperties();
 
         if (this.isSingleplayer()) {
@@ -233,7 +233,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         super.setPlayerIdleTimeout((Integer) dedicatedserverproperties.playerIdleTimeout.get());
         this.setEnforceWhitelist(dedicatedserverproperties.enforceWhitelist);
         // this.worldData.setGameType(dedicatedserverproperties.gamemode); // CraftBukkit - moved to world loading
-        DedicatedServer.LOGGER.info("Default game type: {}", dedicatedserverproperties.gamemode);
+        DedicatedServer.LOGGER.info("기본 게임 모드: {}", dedicatedserverproperties.gamemode);
         // Paper start - Unix domain socket support
         java.net.SocketAddress bindAddress;
         if (this.getLocalIp().startsWith("unix:")) {
@@ -262,14 +262,14 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         // Paper end
 
         this.initializeKeyPair();
-        DedicatedServer.LOGGER.info("Starting Minecraft server on {}:{}", this.getLocalIp().isEmpty() ? "*" : this.getLocalIp(), this.getPort());
+        DedicatedServer.LOGGER.info("서버를 {}:{}에서 시작 하는 중...", this.getLocalIp().isEmpty() ? "*" : this.getLocalIp(), this.getPort());
 
         try {
             this.getConnection().bind(bindAddress); // Paper - Unix domain socket support
         } catch (IOException ioexception) {
-            DedicatedServer.LOGGER.warn("**** FAILED TO BIND TO PORT!");
-            DedicatedServer.LOGGER.warn("The exception was: {}", ioexception.toString());
-            DedicatedServer.LOGGER.warn("Perhaps a server is already running on that port?");
+            DedicatedServer.LOGGER.warn("**** 서버 포트 사용 살패!");
+            DedicatedServer.LOGGER.warn("오류 : {}", ioexception.toString());
+            DedicatedServer.LOGGER.warn("서버가 이미 해당 포트에서 작동하고 있나요?");
             return false;
         }
 
@@ -280,17 +280,17 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         // CraftBukkit end
 
         if (!this.usesAuthentication()) {
-            DedicatedServer.LOGGER.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
-            DedicatedServer.LOGGER.warn("The server will make no attempt to authenticate usernames. Beware.");
+            DedicatedServer.LOGGER.warn("**** 서버가 오프라인/비보안 모드에서 실행 중입니다!");
+            DedicatedServer.LOGGER.warn("서버가 유저닉네임 인증 패스합니다.");
             // Spigot start
             if (org.spigotmc.SpigotConfig.bungee) {
-                DedicatedServer.LOGGER.warn("Whilst this makes it possible to use BungeeCord, unless access to your server is properly restricted, it also opens up the ability for hackers to connect with any username they choose.");
-                DedicatedServer.LOGGER.warn("Please see http://www.spigotmc.org/wiki/firewall-guide/ for further information.");
+                DedicatedServer.LOGGER.warn("번지코드를 위한것이라면, 해커들이 자신이 원하는 닉네임으로 접속할 수 없게 방화벽을 구축해주세요.");
+                DedicatedServer.LOGGER.warn("http://www.spigotmc.org/wiki/firewall-guide/ 에서 자세한 정보를 알수 있어요.");
             } else {
-                DedicatedServer.LOGGER.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
+                DedicatedServer.LOGGER.warn("인터넷 없이 실행할수있게 해주지만, 해커들이 자신이 원하는 닉네임으로 접속할 수 있어요.");
             }
             // Spigot end
-            DedicatedServer.LOGGER.warn("To change this, set \"online-mode\" to \"true\" in the server.properties file.");
+            DedicatedServer.LOGGER.warn("바꾸려면, \"online-mode\"을 \"true\"로 server.properties파일 안에서 바꿔주세요.");
         }
 
 
@@ -302,7 +302,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
 
             SkullBlockEntity.setup(this.services, this);
             GameProfileCache.setUsesAuthentication(this.usesAuthentication());
-            DedicatedServer.LOGGER.info("Preparing level \"{}\"", this.getLevelIdName());
+            DedicatedServer.LOGGER.info("Level 준비 중.. \"{}\"", this.getLevelIdName());
             this.loadLevel(storageSource.getLevelId()); // CraftBukkit
             long j = Util.getNanos() - i;
             String s = String.format(Locale.ROOT, "%.3fs", (double) j / 1.0E9D);
@@ -313,12 +313,12 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             }
 
             if (dedicatedserverproperties.enableQuery) {
-                DedicatedServer.LOGGER.info("Starting GS4 status listener");
+                DedicatedServer.LOGGER.info("GS4 상태 리스너 시작 중");
                 this.queryThreadGs4 = QueryThreadGs4.create(this);
             }
 
             if (dedicatedserverproperties.enableRcon) {
-                DedicatedServer.LOGGER.info("Starting remote control listener");
+                DedicatedServer.LOGGER.info("원격 제어 리스너 시작 중");
                 this.rconThread = RconThread.create(this);
                 this.remoteConsole = new org.bukkit.craftbukkit.command.CraftRemoteConsoleCommandSender(this.rconConsoleSource); // CraftBukkit
             }
@@ -335,7 +335,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             Items.AIR.fillItemCategory(CreativeModeTab.TAB_SEARCH, NonNullList.create());
             if (dedicatedserverproperties.enableJmxMonitoring) {
                 MinecraftServerStatistics.registerJmxMonitoring(this);
-                DedicatedServer.LOGGER.info("JMX monitoring enabled");
+                DedicatedServer.LOGGER.info("JMX 모니터링 활성화 됨.");
             }
 
             return true;
diff --git a/src/main/java/net/minecraft/server/level/progress/LoggerChunkProgressListener.java b/src/main/java/net/minecraft/server/level/progress/LoggerChunkProgressListener.java
index 286aad3205ef8a9e21a47ef07893844fe857556a..b66fb4d8c0d8eae778b776e1d4dd6bb53ed249ee 100644
--- a/src/main/java/net/minecraft/server/level/progress/LoggerChunkProgressListener.java
+++ b/src/main/java/net/minecraft/server/level/progress/LoggerChunkProgressListener.java
@@ -43,7 +43,7 @@ public class LoggerChunkProgressListener implements ChunkProgressListener {
         int i = this.getProgress();
         if (Util.getMillis() > this.nextTickTime) {
             this.nextTickTime += 500L;
-            LOGGER.info(Component.translatable("menu.preparingSpawn", Mth.clamp(i, 0, 100)).getString());
+            LOGGER.info("스폰 지역 준비 중:" + Mth.clamp(i, 0, 100));
         }
 
     }
@@ -54,7 +54,7 @@ public class LoggerChunkProgressListener implements ChunkProgressListener {
 
     @Override
     public void stop() {
-        LOGGER.info("Time elapsed: {} ms", (long)(Util.getMillis() - this.startTime));
+        LOGGER.info("걸린 시간 : {} ms", (long)(Util.getMillis() - this.startTime));
         this.nextTickTime = Long.MAX_VALUE;
     }
 
diff --git a/src/main/java/net/minecraft/server/network/ServerConnectionListener.java b/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
index abcc3266d18f34d160eac87fdea153dce24c60b8..639f5cf718333a0d5126a22dd32777fea2f13335 100644
--- a/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
+++ b/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
@@ -99,11 +99,11 @@ public class ServerConnectionListener {
                 oclass = EpollServerSocketChannel.class;
                 }
                 lazyinitvar = ServerConnectionListener.SERVER_EPOLL_EVENT_GROUP;
-                ServerConnectionListener.LOGGER.info("Using epoll channel type");
+                ServerConnectionListener.LOGGER.info("Epoll 채널 타입 사용 중..");
             } else {
                 oclass = NioServerSocketChannel.class;
                 lazyinitvar = ServerConnectionListener.SERVER_EVENT_GROUP;
-                ServerConnectionListener.LOGGER.info("Using default channel type");
+                ServerConnectionListener.LOGGER.info("기본 채널 타입 사용 중..");
             }
 
             // Paper start - indicate Velocity natives in use
diff --git a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
index 881f6f61015c7f2f28b204467f984dbf8d37d89a..683826db1cf7c6aca746c8fd03ba8780f9788a18 100644
--- a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -121,7 +121,7 @@ public class ServerLoginPacketListenerImpl implements TickablePacketListener, Se
 
     public void disconnect(Component reason) {
         try {
-            ServerLoginPacketListenerImpl.LOGGER.info("Disconnecting {}: {}", this.getUserName(), reason.getString());
+            ServerLoginPacketListenerImpl.LOGGER.info("연결 해제 중 {}: {}", this.getUserName(), reason.getString());
             this.connection.send(new ClientboundLoginDisconnectPacket(reason));
             this.connection.disconnect(reason);
         } catch (Exception exception) {
@@ -234,7 +234,7 @@ public class ServerLoginPacketListenerImpl implements TickablePacketListener, Se
 
     @Override
     public void onDisconnect(Component reason) {
-        ServerLoginPacketListenerImpl.LOGGER.info("{} lost connection: {}", this.getUserName(), reason.getString());
+        ServerLoginPacketListenerImpl.LOGGER.info("{} 연결 상실: {}", this.getUserName(), reason.getString());
     }
 
     public String getUserName() {
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 71623c84a5b15023189c14a6bf36e1b08f935fc1..b797b41f88f1d78af403352deddcd51e418c01bc 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -276,7 +276,7 @@ public abstract class PlayerList {
         // Spigot - view distance
         playerconnection.send(new ClientboundLoginPacket(player.getId(), worlddata.isHardcore(), player.gameMode.getGameModeForPlayer(), player.gameMode.getPreviousGameModeForPlayer(), this.server.levelKeys(), this.registryHolder, worldserver1.dimensionTypeId(), worldserver1.dimension(), BiomeManager.obfuscateSeed(worldserver1.getSeed()), this.getMaxPlayers(), worldserver1.getChunkSource().chunkMap.playerChunkManager.getTargetSendDistance(), worldserver1.getChunkSource().chunkMap.playerChunkManager.getTargetTickViewDistance(), flag1, !flag, worldserver1.isDebug(), worldserver1.isFlat(), player.getLastDeathLocation())); // Paper - replace old player chunk management
         player.getBukkitEntity().sendSupportedChannels(); // CraftBukkit
-        playerconnection.send(new ClientboundCustomPayloadPacket(ClientboundCustomPayloadPacket.BRAND, (new FriendlyByteBuf(Unpooled.buffer())).writeUtf(this.getServer().getServerModName())));
+        playerconnection.send(new ClientboundCustomPayloadPacket(ClientboundCustomPayloadPacket.BRAND, (new FriendlyByteBuf(Unpooled.buffer())).writeUtf("§c§lK§b§lP§6§la§e§lp§d§le§a§lr§r")));
         playerconnection.send(new ClientboundChangeDifficultyPacket(worlddata.getDifficulty(), worlddata.isDifficultyLocked()));
         playerconnection.send(new ClientboundPlayerAbilitiesPacket(player.getAbilities()));
         playerconnection.send(new ClientboundSetCarriedItemPacket(player.getInventory().selected));
@@ -498,7 +498,7 @@ public abstract class PlayerList {
         }
         // Paper end
         // CraftBukkit - Moved from above, added world
-        PlayerList.LOGGER.info("{}[{}] logged in with entity id {} at ([{}]{}, {}, {})", player.getName().getString(), s1, player.getId(), worldserver1.serverLevelData.getLevelName(), player.getX(), player.getY(), player.getZ());
+        PlayerList.LOGGER.info("{}[{}] 로그인 됨! 엔티티 ID : {} 위치 : ([{}]{}, {}, {})", player.getName().getString(), s1, player.getId(), worldserver1.serverLevelData.getLevelName(), player.getX(), player.getY(), player.getZ());
     }
 
     public void updateEntireScoreboard(ServerScoreboard scoreboard, ServerPlayer player) {
diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
index 4872f70977e73c889fe6e2339d00ebc64459613d..5bf1d67a9387f652b9805799782d1893fdbf1c3c 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
@@ -81,7 +81,7 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
             return entry1.getValue(); // CraftBukkit // Paper - decompile fix - *shrugs internally* // todo: is this needed anymore?
         }));
         this.byName = Maps.newHashMap(builder.build()); // CraftBukkit
-        RecipeManager.LOGGER.info("Loaded {} recipes", map1.size());
+        RecipeManager.LOGGER.info("{}개의 레시피 로드 됨.", map1.size());
     }
 
     // CraftBukkit start
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 3f69535cde1175ed9445c9fcf970dcca9f12929d..79daa3ba36e50bec649d262c35a8139577dfb0ae 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1086,10 +1086,10 @@ public final class CraftServer implements Server {
         try {
             perms = (Map<String, Map<String, Object>>) this.yaml.load(stream);
         } catch (MarkedYAMLException ex) {
-            this.getLogger().log(Level.WARNING, "Server permissions file " + file + " is not valid YAML: " + ex.toString());
+            // this.getLogger().log(Level.WARNING, "Server permissions file " + file + " is not valid YAML: " + ex.toString()); KPaper- Ignore Permission Log
             return;
         } catch (Throwable ex) {
-            this.getLogger().log(Level.WARNING, "Server permissions file " + file + " is not valid YAML.", ex);
+            // this.getLogger().log(Level.WARNING, "Server permissions file " + file + " is not valid YAML.", ex); KPaper- Ignore Permission Log
             return;
         } finally {
             try {
@@ -1098,7 +1098,7 @@ public final class CraftServer implements Server {
         }
 
         if (perms == null) {
-            this.getLogger().log(Level.INFO, "Server permissions file " + file + " is empty, ignoring it");
+            // this.getLogger().log(Level.INFO, "Server permissions file " + file + " is empty, ignoring it"); KPaper- Ignore Permission Log
             return;
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 5b48047242e20c216b110502935763ea433c55cd..e106bb376c0ff0cf3014c436f25fedc1ffa28743 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -224,7 +224,7 @@ public class Main {
 
             float javaVersion = Float.parseFloat(System.getProperty("java.class.version"));
             if (javaVersion < 61.0) {
-                System.err.println("Unsupported Java detected (" + javaVersion + "). This version of Minecraft requires at least Java 17. Check your Java version with the command 'java -version'.");
+                System.err.println("미지원 자바 버전 발견 (" + javaVersion + "). 이 버전의 마인크래프트는 자바 17 이상이 필요합니다.");
                 return;
             }
 
@@ -281,16 +281,16 @@ public class Main {
                 java.lang.management.RuntimeMXBean runtimeMX = java.lang.management.ManagementFactory.getRuntimeMXBean();
                 java.lang.management.OperatingSystemMXBean osMX = java.lang.management.ManagementFactory.getOperatingSystemMXBean();
                 if (runtimeMX != null && osMX != null) {
-                    String javaInfo = "Java " + runtimeMX.getSpecVersion() + " (" + runtimeMX.getVmName() + " " + runtimeMX.getVmVersion() + ")";
-                    String osInfo = "Host: " + osMX.getName() + " " + osMX.getVersion() + " (" + osMX.getArch() + ")";
+                    String javaInfo = "자바 " + runtimeMX.getSpecVersion() + " (" + runtimeMX.getVmName() + " " + runtimeMX.getVmVersion() + ")";
+                    String osInfo = "호스트: " + osMX.getName() + " " + osMX.getVersion() + " (" + osMX.getArch() + ")";
 
-                    System.out.println("System Info: " + javaInfo + " " + osInfo);
+                    System.out.println("시스템 정보: " + javaInfo + " " + osInfo);
                 } else {
                     System.out.println("Unable to read system info");
                 }
                 // Paper end
                 System.setProperty( "library.jansi.version", "Paper" ); // Paper - set meaningless jansi version to prevent git builds from crashing on Windows
-                System.out.println("Loading libraries, please wait...");
+                System.out.println("라이브러리 로딩 중.. 잠시 기다려 주세요.");
                 net.minecraft.server.Main.main(options);
             } catch (Throwable t) {
                 t.printStackTrace();
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index 5d162f59fc5ef9adf7fa762b137bbcfca745d9c5..d8c6fe6087b49a15a9d7314e66f00a1c1c926e77 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -290,7 +290,7 @@ public class SpigotConfig
     private static void playerSample()
     {
         SpigotConfig.playerSample = Math.max( SpigotConfig.getInt( "settings.sample-count", 12 ), 0 ); // Paper - Avoid negative counts
-        Bukkit.getLogger().log( Level.INFO, "Server Ping Player Sample Count: {0}", playerSample ); // Paper - Use logger
+        // Bukkit.getLogger().log( Level.INFO, "Server Ping Player Sample Count: {0}", playerSample ); // KPaper - Don't Log Sample Count// Paper - Use logger
     }
 
     public static int playerShuffle;
